#!/bin/bash
# run_tests_clean.sh - Run tests with isolated Neovim environment
# Uses your same Neovim binary but completely isolated config

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors
RED='\033[31m'
GREEN='\033[32m'
BLUE='\033[34m'
YELLOW='\033[33m'
RESET='\033[0m'

print_status() {
    local color=$1
    local prefix=$2
    local message=$3
    printf '%s[%s]%s %s\n' "$color" "$prefix" "$RESET" "$message"
}

print_info() { print_status "$BLUE" "INFO" "$1"; }
print_success() { print_status "$GREEN" "SUCCESS" "$1"; }
print_warning() { print_status "$YELLOW" "WARNING" "$1"; }
print_error() { print_status "$RED" "ERROR" "$1"; }

print_info "Running tests with isolated Neovim environment"
print_info "Using your Neovim binary: $(which nvim)"
print_info "Neovim version: $(nvim --version | head -n1)"

# Test basic functionality (no LSP required)
run_basic_tests() {
    print_info "Running basic tests (no LSP)..."
    
    nvim --clean -u "$SCRIPT_DIR/test_init.lua" \
        -c "lua package.path = package.path .. ';$PROJECT_ROOT/lua/?.lua;$PROJECT_ROOT/lua/?/init.lua'" \
        -c "lua dofile('$SCRIPT_DIR/real_unit_tests.lua')" \
        -c "qa!"
    
    if [ $? -eq 0 ]; then
        print_success "Basic tests passed"
        return 0
    else
        print_error "Basic tests failed"
        return 1
    fi
}

# Test with LSP functionality
run_lsp_tests() {
    print_info "Running LSP integration tests..."
    
    nvim --clean -u "$SCRIPT_DIR/test_init.lua" \
        -c "lua dofile('$SCRIPT_DIR/test_with_lsp.lua')" \
        -c "lua package.path = package.path .. ';$PROJECT_ROOT/lua/?.lua;$PROJECT_ROOT/lua/?/init.lua'" \
        -c "lua dofile('$SCRIPT_DIR/real_integration_tests.lua')" \
        -c "qa!"
    
    if [ $? -eq 0 ]; then
        print_success "LSP tests passed"
        return 0
    else
        print_error "LSP tests failed"
        return 1
    fi
}

# Verify test environment
verify_environment() {
    print_info "Verifying test environment..."
    
    # Test that we can load our plugin
    nvim --clean -u "$SCRIPT_DIR/test_init.lua" \
        --headless \
        -c "lua local ok, plugin = pcall(require, 'hoverfloat'); if ok then print('✅ Plugin loads') else error('❌ Plugin failed: ' .. plugin) end" \
        -c "qa!" 2>&1
    
    if [ $? -eq 0 ]; then
        print_success "Test environment verified"
        return 0
    else
        print_error "Test environment verification failed"
        return 1
    fi
}

# Parse command line arguments
run_basic=true
run_lsp=true
verify_only=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --basic-only)
            run_lsp=false
            shift
            ;;
        --lsp-only)
            run_basic=false
            shift
            ;;
        --verify-only)
            verify_only=true
            run_basic=false
            run_lsp=false
            shift
            ;;
        --help)
            echo "Usage: $0 [--basic-only] [--lsp-only] [--verify-only]"
            echo "  --basic-only   Run only basic tests (no LSP)"
            echo "  --lsp-only     Run only LSP integration tests"
            echo "  --verify-only  Only verify test environment"
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Main execution
main() {
    local exit_code=0
    
    # Always verify environment first
    if ! verify_environment; then
        exit_code=1
    fi
    
    if [ "$verify_only" = true ]; then
        exit $exit_code
    fi
    
    # Run tests based on options
    if [ "$run_basic" = true ]; then
        if ! run_basic_tests; then
            exit_code=1
        fi
    fi
    
    if [ "$run_lsp" = true ]; then
        if ! run_lsp_tests; then
            exit_code=1
        fi
    fi
    
    # Summary
    if [ $exit_code -eq 0 ]; then
        print_success "All tests passed!"
    else
        print_error "Some tests failed"
    fi
    
    exit $exit_code
}

main "$@"