{
  "socket_path": "/tmp/nvim_context.sock",
  "scenarios": [
    {
      "name": "typescript_interface",
      "description": "TypeScript interface with complex type information",
      "delay_ms": 500,
      "data": {
        "file": "src/types.ts",
        "line": 25,
        "col": 18,
        "timestamp": 1704067200000,
        "hover": [
          "```typescript",
          "interface ApiResponse<T> {",
          "  data: T;",
          "  status: 'success' | 'error';",
          "  message?: string;",
          "  metadata: {",
          "    timestamp: number;",
          "    requestId: string;",
          "  };",
          "}",
          "```",
          "",
          "Generic API response interface used throughout the application.",
          "Provides consistent structure for all API responses.",
          "",
          "**Type Parameters:**",
          "- `T` - The type of the response data",
          "",
          "**Properties:**",
          "- `data` - The actual response payload",
          "- `status` - Success or error indicator", 
          "- `message` - Optional human-readable message",
          "- `metadata` - Request tracking information"
        ],
        "definition": {
          "file": "src/types/api.ts",
          "line": 12,
          "col": 10
        },
        "references_count": 45,
        "references": [
          {"file": "src/api/users.ts", "line": 89, "col": 16},
          {"file": "src/api/posts.ts", "line": 23, "col": 8},
          {"file": "src/components/DataTable.tsx", "line": 156, "col": 12},
          {"file": "src/hooks/useApi.ts", "line": 34, "col": 20},
          {"file": "src/utils/api-client.ts", "line": 78, "col": 4}
        ],
        "references_more": 40,
        "type_definition": {
          "file": "src/types/api.ts",
          "line": 12,
          "col": 10
        }
      }
    },
    {
      "name": "python_class_method",
      "description": "Python class method with docstring and type hints",
      "delay_ms": 400,
      "data": {
        "file": "src/data_processor.py",
        "line": 67,
        "col": 12,
        "timestamp": 1704067260000,
        "hover": [
          "```python",
          "def process_dataset(",
          "    self,",
          "    data: pd.DataFrame,",
          "    filters: Optional[Dict[str, Any]] = None,",
          "    chunk_size: int = 1000",
          ") -> ProcessingResult",
          "```",
          "",
          "Process a pandas DataFrame with optional filtering and chunking.",
          "",
          "This method applies the configured processing pipeline to the input",
          "DataFrame, optionally filtering rows based on the provided criteria",
          "and processing data in chunks for memory efficiency.",
          "",
          "Args:",
          "    data: The input DataFrame to process",
          "    filters: Optional dictionary of column filters",
          "    chunk_size: Number of rows to process at once",
          "",
          "Returns:",
          "    ProcessingResult containing the processed data and metadata",
          "",
          "Raises:",
          "    ValidationError: If input data fails validation",
          "    ProcessingError: If processing pipeline fails"
        ],
        "definition": {
          "file": "src/data_processor.py",
          "line": 67,
          "col": 8
        },
        "references_count": 12,
        "references": [
          {"file": "src/main.py", "line": 34, "col": 20},
          {"file": "src/batch_processor.py", "line": 89, "col": 16},
          {"file": "tests/test_processor.py", "line": 45, "col": 12}
        ],
        "references_more": 9
      }
    },
    {
      "name": "rust_generic_function",
      "description": "Rust generic function with trait bounds",
      "delay_ms": 600,
      "data": {
        "file": "src/algorithms.rs",
        "line": 123,
        "col": 8,
        "timestamp": 1704067320000,
        "hover": [
          "```rust",
          "pub fn merge_sorted<T, I>(",
          "    iterators: I,",
          "    comparator: impl Fn(&T, &T) -> Ordering,",
          ") -> impl Iterator<Item = T>",
          "where",
          "    T: Clone,",
          "    I: IntoIterator,",
          "    I::Item: Iterator<Item = T>,",
          "```",
          "",
          "Merges multiple sorted iterators into a single sorted iterator.",
          "",
          "This function takes an iterable of sorted iterators and merges them",
          "into a single iterator that yields items in sorted order according",
          "to the provided comparator function.",
          "",
          "# Type Parameters",
          "",
          "* `T` - The type of items yielded by the iterators",
          "* `I` - The type that can be converted into an iterator of iterators",
          "",
          "# Arguments",
          "",
          "* `iterators` - An iterable of sorted iterators to merge",
          "* `comparator` - Function to determine ordering between items",
          "",
          "# Returns",
          "",
          "An iterator that yields items from all input iterators in sorted order.",
          "",
          "# Example",
          "",
          "```rust",
          "let iter1 = vec![1, 3, 5].into_iter();",
          "let iter2 = vec![2, 4, 6].into_iter();",
          "let merged: Vec<i32> = merge_sorted(",
          "    vec![iter1, iter2],",
          "    |a, b| a.cmp(b)",
          ").collect();",
          "assert_eq!(merged, vec![1, 2, 3, 4, 5, 6]);",
          "```"
        ],
        "definition": {
          "file": "src/algorithms.rs",
          "line": 123,
          "col": 8
        },
        "references_count": 8,
        "references": [
          {"file": "src/sort_utils.rs", "line": 45, "col": 12},
          {"file": "src/data_merge.rs", "line": 78, "col": 8},
          {"file": "tests/algorithms_test.rs", "line": 156, "col": 16}
        ],
        "references_more": 5
      }
    },
    {
      "name": "empty_hover",
      "description": "Symbol with no hover information available",
      "delay_ms": 200,
      "data": {
        "file": "src/unknown.rs",
        "line": 42,
        "col": 15,
        "timestamp": 1704067380000,
        "hover": [],
        "references_count": 0,
        "references": []
      }
    },
    {
      "name": "minimal_info",
      "description": "Symbol with minimal information",
      "delay_ms": 300,
      "data": {
        "file": "src/simple.go",
        "line": 10,
        "col": 5,
        "timestamp": 1704067440000,
        "hover": [
          "```go",
          "var count int",
          "```"
        ],
        "definition": {
          "file": "src/simple.go",
          "line": 10,
          "col": 4
        },
        "references_count": 3,
        "references": [
          {"file": "src/simple.go", "line": 15, "col": 8},
          {"file": "src/simple.go", "line": 23, "col": 12}
        ],
        "references_more": 1
      }
    },
    {
      "name": "deeply_nested_type",
      "description": "Complex nested type with long definition paths",
      "delay_ms": 800,
      "data": {
        "file": "src/types/nested/complex.ts",
        "line": 234,
        "col": 45,
        "timestamp": 1704067500000,
        "hover": [
          "```typescript",
          "type DeepNestedConfig = {",
          "  server: {",
          "    host: string;",
          "    port: number;",
          "    ssl: {",
          "      enabled: boolean;",
          "      cert: {",
          "        path: string;",
          "        passphrase?: string;",
          "        ca?: string[];",
          "      };",
          "      protocols: ('TLSv1.2' | 'TLSv1.3')[];",
          "    };",
          "  };",
          "  database: {",
          "    connections: {",
          "      read: DatabaseConfig[];",
          "      write: DatabaseConfig;",
          "    };",
          "    pooling: {",
          "      min: number;",
          "      max: number;",
          "      acquireTimeoutMillis: number;",
          "    };",
          "  };",
          "  logging: {",
          "    level: 'debug' | 'info' | 'warn' | 'error';",
          "    outputs: LogOutput[];",
          "    formatters: {",
          "      timestamp: boolean;",
          "      colorize: boolean;",
          "      json: boolean;",
          "    };",
          "  };",
          "}",
          "```",
          "",
          "Comprehensive configuration type for the application server.",
          "",
          "This type defines the complete configuration structure including",
          "server settings, database connections, and logging configuration.",
          "All nested objects provide type safety and IntelliSense support."
        ],
        "definition": {
          "file": "src/types/config/server-config.ts",
          "line": 45,
          "col": 5
        },
        "references_count": 67,
        "references": [
          {"file": "src/server.ts", "line": 12, "col": 28},
          {"file": "src/config/loader.ts", "line": 89, "col": 16},
          {"file": "src/database/connection.ts", "line": 34, "col": 8},
          {"file": "src/logging/setup.ts", "line": 23, "col": 12},
          {"file": "tests/config.test.ts", "line": 156, "col": 20},
          {"file": "docs/configuration.md", "line": 45, "col": 8}
        ],
        "references_more": 61,
        "type_definition": {
          "file": "src/types/config/server-config.ts",
          "line": 45,
          "col": 5
        }
      }
    },
    {
      "name": "error_scenario",
      "description": "Simulates communication error",
      "delay_ms": 1000,
      "data": {
        "file": "src/error_test.rs",
        "line": 1,
        "col": 1,
        "timestamp": 1704067560000,
        "hover": [
          "⚠️  LSP Server Error",
          "",
          "Failed to retrieve hover information:",
          "Request timeout after 5000ms",
          "",
          "This can happen when:",
          "• LSP server is overloaded",
          "• File is too large to process",
          "• Network connectivity issues",
          "• Server crashed or became unresponsive"
        ],
        "references_count": 0,
        "references": []
      }
    }
  ]
}
